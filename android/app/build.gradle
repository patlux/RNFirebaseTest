apply plugin: "com.android.application"
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'io.fabric'

import com.android.build.OutputFile

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

android {
    compileSdkVersion project.ext.myCompileSdkVersion
    buildToolsVersion project.ext.myBuildToolsVersion

    defaultConfig {
        applicationId "com.rnfirebasetest"
        minSdkVersion project.ext.myMinSdkVersion
        targetSdkVersion project.ext.myTargetSdkVersion
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    splits {
        abi {
            reset()
            enable true
            universalApk false
        }
    }
    signingConfigs {
        release {
            keyAlias "rn-firebase"
            keyPassword "123123123"
            storeFile file("rn-firebase.keystore")
            storePassword "123123123"
        }
    }
    buildTypes {
        debug{
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules-header-debug.pro", "proguard-rules.pro"
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules-header-release.pro", "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation(project(':react-native-firebase')) {
        transitive = false
    }
    //    compile project(':react-native-firebase')

    // RNFirebase required dependencies
    implementation "com.google.firebase:firebase-core:$project.ext.googlePlayServicesVersion"
    implementation "com.google.android.gms:play-services-base:$project.ext.googlePlayServicesVersion"

   // RNFirebase optional dependencies
    implementation "com.google.firebase:firebase-ads:$project.ext.googlePlayServicesVersion"
    implementation "com.google.firebase:firebase-auth:$project.ext.googlePlayServicesVersion"
    implementation "com.google.firebase:firebase-config:$project.ext.googlePlayServicesVersion"
    implementation "com.google.firebase:firebase-database:$project.ext.googlePlayServicesVersion"
    implementation "com.google.firebase:firebase-invites:$project.ext.googlePlayServicesVersion"
    implementation "com.google.firebase:firebase-firestore:$project.ext.googlePlayServicesVersion"
    implementation "com.google.firebase:firebase-messaging:$project.ext.googlePlayServicesVersion"
    implementation "com.google.firebase:firebase-perf:$project.ext.googlePlayServicesVersion"
    implementation "com.google.firebase:firebase-storage:$project.ext.googlePlayServicesVersion"

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
    }

    implementation 'me.leolin:ShortcutBadger:1.1.21@aar'

    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
